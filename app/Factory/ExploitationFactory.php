<?php
namespace App\Factory;

use Carbon\Carbon;
use App\Models\Troupeau;
use App\Factory\ListeEspeces;
use App\Factory\ParcellesTypes;

use App\Traits\JsonManager;
class ExploitationFactory
{
  use JsonManager;

  protected $troupeau;
  protected $dessinparcellaire;
  protected $dates;

  public function __construct($valeurs)
  {

    $this->troupeau = new Troupeau($valeurs['troupeau'], $valeurs['effectif']);
    $this->constitueTroupeau($valeurs);
    self::constitueParcelles($valeurs);
    self::constitueSaison($valeurs);
  }

  public function troupeau()
  {
    return $this->troupeau;
  }

  public function dessinparcellaire()
  {
    return $this->dessinparcellaire;
  }

  public function dates()
  {
    return $this->dates;
  }

  public function constitueTroupeau($valeurs)
  {

    if($valeurs['troupeau'] !== null)
    {
      switch ($valeurs['infestation_troupeau']) {
        case 'vert':
          $nb_strongles = 0;
          break;
        case 'orange':
          $nb_strongles = 5;
          break;
        case 'rouge':
          $nb_strongles = 10;
          break;

        default:
        $nb_strongles = 5;
          break;
      }

      $this->troupeau->setInfestation($nb_strongles);

      $especes = $this->litJson('especes.json');

      foreach ($especes as $espece) {

        if($espece->type === $valeurs['troupeau'])
        {

          $this->troupeau->setSensibilite($espece->sensibilite);

        }
      }
    }
  }

  public function constitueParcelles($valeurs)
  {
    $num_depart = "";
    foreach ($valeurs as $key => $value) {

      if(substr($key,0,8) === "parcelle")
      {
        // on explose le nom du champ input en en trois:
        $num_parcelle = explode("_", $key)[2]; // le troisième et le numéro d'ordre de la parcelle
        $libelle_detail = explode("_", $key)[1]; // le deuxième est le libellé (nom, superficie, histoire)
        if($num_parcelle !== $num_depart) {
          if($libelle_detail == "histoire" ) // si le libellé est histoire il faut chercher le niveau d'infestation
          // correspondant à ce type de parcelle.
          {
            $liste_parcelles_type = new ParcellesTypes();
            foreach ($liste_parcelles_type->listeParcellesType() as $parcelle) {
              if($parcelle->nom() === $value)
              {
                $liste_parcelle[$num_parcelle]["oeuf"] = count($parcelle->infestation());
                $liste_parcelle[$num_parcelle]["L3"] = $parcelle->contaminant();
               }
            }
          }
          else // sinon on ajoute simplement la valeur correspondant au libellé (nom ou superficie)
          {
            $liste_parcelle[$num_parcelle][$libelle_detail] = $value;
          }
        }
        $num_depart = $num_parcelle +1; // on incrémente pour passer à la parcelle suivante

      }
    }
    // dd($liste_parcelle);
    $parcelleFactory = new ParcelleFactory($liste_parcelle);

    $this->dessinparcellaire = $parcelleFactory->dessinParcellaire();
  }

  public function constitueSaison($valeurs)
  {
    foreach ($valeurs as $key => $value) {
      switch ($key) {
        case 'mise_a_l_herbe':
          $this->dates["mise_a_l_herbe"] = new Carbon($value);
          break;

        case 'entre_bergerie':
          $this->dates["entre_bergerie"] = new Carbon($value);
          break;
      }
    }
    $this->dates["duree_paturage"] = $this->dates["entre_bergerie"]->diff($this->dates["mise_a_l_herbe"])->days;
  }
}
